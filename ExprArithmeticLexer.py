# Generated from ExprArithmetic.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,9,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,5,0,27,8,0,10,
        0,12,0,30,9,0,1,1,4,1,33,8,1,11,1,12,1,34,1,1,1,1,4,1,39,8,1,11,
        1,12,1,40,3,1,43,8,1,1,1,3,1,46,8,1,1,1,4,1,49,8,1,11,1,12,1,50,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,4,8,66,8,8,11,
        8,12,8,67,1,8,1,8,1,9,1,9,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,0,21,0,1,0,3,2,0,43,43,45,45,3,0,9,10,13,13,
        32,32,2,0,65,90,97,122,80,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,1,23,1,0,0,0,3,32,1,0,0,0,5,52,1,0,0,0,7,54,1,0,0,0,9,56,
        1,0,0,0,11,58,1,0,0,0,13,60,1,0,0,0,15,62,1,0,0,0,17,65,1,0,0,0,
        19,71,1,0,0,0,21,73,1,0,0,0,23,28,3,19,9,0,24,27,3,19,9,0,25,27,
        3,21,10,0,26,24,1,0,0,0,26,25,1,0,0,0,27,30,1,0,0,0,28,26,1,0,0,
        0,28,29,1,0,0,0,29,2,1,0,0,0,30,28,1,0,0,0,31,33,3,21,10,0,32,31,
        1,0,0,0,33,34,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,42,1,0,0,0,
        36,38,5,46,0,0,37,39,3,21,10,0,38,37,1,0,0,0,39,40,1,0,0,0,40,38,
        1,0,0,0,40,41,1,0,0,0,41,43,1,0,0,0,42,36,1,0,0,0,42,43,1,0,0,0,
        43,45,1,0,0,0,44,46,7,0,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,48,1,
        0,0,0,47,49,3,21,10,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,
        50,51,1,0,0,0,51,4,1,0,0,0,52,53,5,43,0,0,53,6,1,0,0,0,54,55,5,45,
        0,0,55,8,1,0,0,0,56,57,5,42,0,0,57,10,1,0,0,0,58,59,5,47,0,0,59,
        12,1,0,0,0,60,61,5,40,0,0,61,14,1,0,0,0,62,63,5,41,0,0,63,16,1,0,
        0,0,64,66,7,1,0,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,
        1,0,0,0,68,69,1,0,0,0,69,70,6,8,0,0,70,18,1,0,0,0,71,72,7,2,0,0,
        72,20,1,0,0,0,73,74,2,48,57,0,74,22,1,0,0,0,9,0,26,28,34,40,42,45,
        50,67,1,6,0,0
    ]

class ExprArithmeticLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    NUMBER = 2
    PLUS = 3
    MINUS = 4
    TIMES = 5
    DIV = 6
    LPAREN = 7
    RPAREN = 8
    WHITESPACE = 9

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "PLUS", "MINUS", "TIMES", "DIV", "LPAREN", "RPAREN", 
            "WHITESPACE" ]

    ruleNames = [ "ID", "NUMBER", "PLUS", "MINUS", "TIMES", "DIV", "LPAREN", 
                  "RPAREN", "WHITESPACE", "LETTER", "DIGIT" ]

    grammarFileName = "ExprArithmetic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


