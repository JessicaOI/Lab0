# Generated from Expr.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,5,6,41,8,6,10,6,12,
        6,44,9,6,1,7,1,7,1,7,1,7,5,7,50,8,7,10,7,12,7,53,9,7,1,7,1,7,1,8,
        4,8,58,8,8,11,8,12,8,59,1,9,1,9,1,10,3,10,65,8,10,1,10,1,10,1,11,
        4,11,70,8,11,11,11,12,11,71,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,4,1,0,48,57,4,0,10,10,
        13,13,34,34,92,92,2,0,65,90,97,122,2,0,9,9,32,32,81,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,1,25,1,0,0,0,3,27,1,0,0,0,5,29,1,0,0,0,7,31,1,0,0,0,9,33,
        1,0,0,0,11,35,1,0,0,0,13,37,1,0,0,0,15,45,1,0,0,0,17,57,1,0,0,0,
        19,61,1,0,0,0,21,64,1,0,0,0,23,69,1,0,0,0,25,26,5,42,0,0,26,2,1,
        0,0,0,27,28,5,47,0,0,28,4,1,0,0,0,29,30,5,43,0,0,30,6,1,0,0,0,31,
        32,5,45,0,0,32,8,1,0,0,0,33,34,5,40,0,0,34,10,1,0,0,0,35,36,5,41,
        0,0,36,12,1,0,0,0,37,42,3,19,9,0,38,41,3,19,9,0,39,41,7,0,0,0,40,
        38,1,0,0,0,40,39,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,
        0,43,14,1,0,0,0,44,42,1,0,0,0,45,51,5,34,0,0,46,50,8,1,0,0,47,48,
        5,92,0,0,48,50,9,0,0,0,49,46,1,0,0,0,49,47,1,0,0,0,50,53,1,0,0,0,
        51,49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,5,
        34,0,0,55,16,1,0,0,0,56,58,7,0,0,0,57,56,1,0,0,0,58,59,1,0,0,0,59,
        57,1,0,0,0,59,60,1,0,0,0,60,18,1,0,0,0,61,62,7,2,0,0,62,20,1,0,0,
        0,63,65,5,13,0,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,67,
        5,10,0,0,67,22,1,0,0,0,68,70,7,3,0,0,69,68,1,0,0,0,70,71,1,0,0,0,
        71,69,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,74,6,11,0,0,74,24,1,
        0,0,0,8,0,40,42,49,51,59,64,71,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    ID = 7
    STRING = 8
    INT = 9
    LETTER = 10
    NEWLINE = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'+'", "'-'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "INT", "LETTER", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "ID", 
                  "STRING", "INT", "LETTER", "NEWLINE", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


